trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Convert the dataset to a transactions object
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Convert the dataset to a transactions object
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=3, sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Convert the dataset to a transactions object
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=3, sep=",", rm.duplicates=TRUE)
inspect(trans)
# Convert the dataset to a transactions object
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=3, sep=",", rm.duplicates=TRUE)
# Read the dataset into a data frame
dataset <- read.csv("datasets/1_Retail_Transactions_Dataset.csv")
# Create a transactions object
trans <- as(dataset$Product, "transactions")
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
library(tidyverse)
library(arules) # mining association rules and frequent itemsets
library(arulesViz) # visualization techniques for association rules
library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
# Create a transactions object
trans <- as(dataset$Product, "transactions")
# Create a transactions object
trans <- transactions(dataset$Product)
# Convert the dataset to a transactions object
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(3), sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Convert the dataset to a transactions object
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(4), sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(4), sep=",", rm.duplicates=TRUE)
summarise(trans)
inspect(trans)
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(4), sep=",", rm.duplicates=TRUE)
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(1,4), sep=",", rm.duplicates=TRUE)
summarise(trans)
inspect(trans)
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(1,4), sep=",", rm.duplicates=TRUE)
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(1,4), sep=",", rm.duplicates=TRUE)
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(4), sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", rm.duplicates=TRUE)
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", header = TRUE, rm.duplicates=TRUE)
inspect(trans)
summarise(trans)
trans
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", rm.duplicates=TRUE)
inspect(trans)
rm(columns)
rm(dataset)
rm(mat)
rm(trans_df)
rm(trans)
clear
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=4, sep=",", rm.duplicates=TRUE)
trans
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
rm(trans)
trans <- read.transactions("datasets/1_Retail_Transactions_Dataset.csv", format="basket", cols=c(4), sep=",", rm.duplicates=TRUE)
trans
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
rm (trans)
rm(item_labels)
products_list <- strsplit(X1_Retail_Transactions_Dataset$Product, ",")
# Create a transactions object
trans <- as(products_list, "transactions")
itemFrequencyPlot(trans, topN = 10, type = "absolute",
xlab = "Product", ylab = "Frequency",
main = "Item Frequency Plot for Products")
print(products_list)
unique_products_list <- lapply(products_list, unique)
print(unique_products_list)
unique_products_list <- lapply(products_list, unique)
print(unique_products_list)
itemFrequencyPlot(unique_products_list, topN = 10, type = "absolute",
xlab = "Product", ylab = "Frequency",
main = "Item Frequency Plot for Products")
trans_unique <- as(unique_products_list, "transactions")
itemFrequencyPlot(trans_unique, topN = 10, type = "absolute",
xlab = "Product", ylab = "Frequency",
main = "Item Frequency Plot for Products")
itemFrequencyPlot(trans_unique, topN = 10, type = "absolute",
xlab = "Product", ylab = "Frequency",
main = "Item Frequency Plot for Products")
itemFrequencyPlot(trans_unique, topN = 10, type = "absolute",
xlab = "Product", ylab = "Frequency",
main = "Item Frequency Plot for Products")
trans_3 <- as(sapply(lapply(products_list, unique), paste, collapse = ","), "transactions")
print(products_list)
inspect(trans)
print(products_list)
inspect(trans)
result <- X1_Retail_Transactions_Dataset %>%
unnest_wider(Products, names_sep = "_") %>% replace(is.na(.), 0)
install.packages("magrittr")
library(magrittr)
result <- X1_Retail_Transactions_Dataset %>%
unnest_wider(Products, names_sep = "_") %>% replace(is.na(.), 0)
library(tidyverse)
result <- X1_Retail_Transactions_Dataset %>%
unnest_wider(Products, names_sep = "_") %>% replace(is.na(.), 0)
result <- X1_Retail_Transactions_Dataset %>%
unnest_wider(Product, names_sep = "_") %>% replace(is.na(.), 0)
print(result)
rm(results)
rm(result)
result <- X1_Retail_Transactions_Dataset %>%
unnest(Product) %>%
mutate(value = 1) %>%
pivot_wider(names_from = Product, values_from = value, values_fill = 0)
print(result)
print(colnames(result))
result <- X1_Retail_Transactions_Dataset %>%
unnest(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0)
print(result)
print(colnames(result))
print(result)
rm(result)
result <- X1_Retail_Transactions_Dataset %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0)
print(result)
result1 <- X1_Retail_Transactions_Dataset %>% unnest_longer(Product)
print(result1)
result <- X1_Retail_Transactions_Dataset %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
spread(key = Product, value = value, fill = 0)
result <- X1_Retail_Transactions_Dataset %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
spread(key = Product, value = value, fill = 0)
print(result)
rm(result1)
rm(result)
result_2 <- X1_Retail_Transactions_Dataset %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
spread(key = Product, value = value, fill = 0)
print(result_2)
print(colnames(result_2))
rm(result_2)
result_3 <- X1_Retail_Transactions_Dataset %>%
unnest_longer(Product)
print(result_3)
View(result_3)
View(X1_Retail_Transactions_Dataset)
str(X1_Retail_Transactions_Dataset)
X1_Retail_Transactions_Dataset$Product <- lapply(strsplit(as.character(df1$Product),
"[][']|,\\s*"), function(x) x[nzchar(x)])l
X1_Retail_Transactions_Dataset$Product <- lapply(strsplit(as.character(X1_Retail_Transactions_Dataset$Product),
"[][']|,\\s*"), function(x) x[nzchar(x)])l
X1_Retail_Transactions_Dataset$Product <- lapply(X1_Retail_Transactions_Dataset$Product, function(x) fromJSON(x, flatten = TRUE)$value)
install.packages("jsonlite")
X1_Retail_Transactions_Dataset$Product <- lapply(X1_Retail_Transactions_Dataset$Product, function(x) fromJSON(x, flatten = TRUE)$value)
library(jsonlite)
X1_Retail_Transactions_Dataset$Product <- lapply(X1_Retail_Transactions_Dataset$Product, function(x) fromJSON(x, flatten = TRUE)$value)
X1_Retail_Transactions_Dataset$Product <- gsub("'", "\"", X1_Retail_Transactions_Dataset$Product)
# Convert the string representation to a vector of characters
X1_Retail_Transactions_Dataset$Product <- lapply(X1_Retail_Transactions_Dataset$Product, function(x) unlist(fromJSON(x, flatten = TRUE)$value))
# Convert the string representation to a vector of characters
X1_Retail_Transactions_Dataset$Product <- lapply(X1_Retail_Transactions_Dataset$Product, function(x) unlist(unname(fromJSON(x))))
# Print the corrected data frame
print(X1_Retail_Transactions_Dataset)
str(X1_Retail_Transactions_Dataset)
View(X1_Retail_Transactions_Dataset)
library(tidyverse)
library(arules) # mining association rules and frequent itemsets
library(arulesViz) # visualization techniques for association rules
library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
library(magrittr)
library(jsonlite)
View(X1_Retail_Transactions_Dataset)
copied_df <- copy(X1_Retail_Transactions_Dataset)
copied_df <- data.frame(X1_Retail_Transactions_Dataset)
View(copied_df)
copied_df$Product <- gsub("'", "\"", copied_df$Product)
# Convert the string representation to a vector of characters
copied_df$Product <- lapply(copied_df$Product, function(x) unlist(unname(fromJSON(x))))
# Print the corrected data frame
print(copied_df)
str(copied_df)
View(copied_df)
result_3 <- copied_df %>%
unnest_longer(copied_df)
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0)
str(copied_df)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0L)
install.packages("dplyr")
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L  # Use 0L for integer or 0.0 for numeric
)
library(tidyverse)
library(arules) # mining association rules and frequent itemsets
library(arulesViz) # visualization techniques for association rules
library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
library(magrittr)
library(jsonlite)
copied_df <- data.frame(X1_Retail_Transactions_Dataset)
View(copied_df)
copied_df$Product <- gsub("'", "\"", copied_df$Product)
# Convert the string representation to a vector of characters
copied_df$Product <- lapply(copied_df$Product, function(x) unlist(unname(fromJSON(x))))
# Print the corrected data frame
print(copied_df)
str(copied_df)
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L  # Use 0L for integer or 0.0 for numeric
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = list(value = function(x) ifelse(is.na(x), 0L, x))
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = list(value = 0L)
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = value = function(x) ifelse(is.na(x), 0L, x)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
#values_from = value,
values_fn = function(x) ifelse(is.na(x), 0L, x)
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
#values_from = value,
values_fn = function(x) if(is.na(x), 0L, x)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
#values_from = value,
values_fn = if(is.na(x)) 0L else x
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = list(value = 0L)
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L
)
View(result_3)
str(result_3)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = "0"
)
str(copied_df)
str(result_3)
View(result_3)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = c(Transaction_ID,Product),
names_from = Product,
values_from = 1
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = 1
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = Total_Items
)
View(result)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = function(x) ifelse(is.na(x), 0L, x)
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = list(value = ~replace_na(., 0L))
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = value = ~replace_na(., 0L)
library(tidyverse)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fn = ~replace_na(., 0L)
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = 0
)
str(result)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = list(0)
)
View(result)
transactions <- as(result_3$Product, "transactions")
transactions <- as(result_3$Product, "transactions")
transactions <- as(result_3, "transactions")
View(transactions)
inspect(transactions)
transactions <- as(result, "transactions")
inspect(transactions)
transactions <- as(result$Product, "transactions")
View(result)
transactions <- as(df[, -1], "transactions")
transactions <- as(df[2,50], "transactions")
transactions <- as(df[,-1], "transactions")
transactions <- as.data.frame(df[2, ]) %>%
as("transactions")
transactions <- as.data.frame(df[2,49]) %>%
as("transactions")
transactions <- as(result[,-1], "transactions")
inspect(head(transactions))
num_columns <- ncol(result)
# Print the number of columns
print(num_columns)
column_names <- names(result)
# Print the column names along with their indices
print(column_names)
transactions_2 <- as(result3, "transactions")
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
transactions_2 <- as(result3, "transactions")
transactions_2 <- as(result_3, "transactions")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="Product",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="Product",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
View(transactions)
View(transactions@itemInfo)
rm(transactions)
rm(transactions_2)
rm(trans_df)
rm(trans)
rm(mat)
rm(dataset)
transactions <- as(result[,-1], "transactions")
itemFrequencyPlot(transactions, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
