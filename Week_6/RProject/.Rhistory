library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
library(magrittr)
library(jsonlite)
View(X1_Retail_Transactions_Dataset)
copied_df <- copy(X1_Retail_Transactions_Dataset)
copied_df <- data.frame(X1_Retail_Transactions_Dataset)
View(copied_df)
copied_df$Product <- gsub("'", "\"", copied_df$Product)
# Convert the string representation to a vector of characters
copied_df$Product <- lapply(copied_df$Product, function(x) unlist(unname(fromJSON(x))))
# Print the corrected data frame
print(copied_df)
str(copied_df)
View(copied_df)
result_3 <- copied_df %>%
unnest_longer(copied_df)
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0)
str(copied_df)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(id_cols = Transaction_ID,names_from = Product, values_from = value, values_fill = 0L)
install.packages("dplyr")
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L  # Use 0L for integer or 0.0 for numeric
)
library(tidyverse)
library(arules) # mining association rules and frequent itemsets
library(arulesViz) # visualization techniques for association rules
library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
library(magrittr)
library(jsonlite)
copied_df <- data.frame(X1_Retail_Transactions_Dataset)
View(copied_df)
copied_df$Product <- gsub("'", "\"", copied_df$Product)
# Convert the string representation to a vector of characters
copied_df$Product <- lapply(copied_df$Product, function(x) unlist(unname(fromJSON(x))))
# Print the corrected data frame
print(copied_df)
str(copied_df)
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L  # Use 0L for integer or 0.0 for numeric
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = list(value = function(x) ifelse(is.na(x), 0L, x))
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = list(value = 0L)
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = value = function(x) ifelse(is.na(x), 0L, x)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
#values_from = value,
values_fn = function(x) ifelse(is.na(x), 0L, x)
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
#values_from = value,
values_fn = function(x) if(is.na(x), 0L, x)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
#values_from = value,
values_fn = if(is.na(x)) 0L else x
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = list(value = 0L)
)
result <- copied_df %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = 0L
)
View(result_3)
str(result_3)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fill = "0"
)
str(copied_df)
str(result_3)
View(result_3)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = c(Transaction_ID,Product),
names_from = Product,
values_from = 1
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = 1
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = Total_Items
)
View(result)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = function(x) ifelse(is.na(x), 0L, x)
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = list(value = ~replace_na(., 0L))
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_from = value,
values_fn = value = ~replace_na(., 0L)
library(tidyverse)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fn = ~replace_na(., 0L)
)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = 0
)
str(result)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = list(0)
)
View(result)
transactions <- as(result_3$Product, "transactions")
transactions <- as(result_3$Product, "transactions")
transactions <- as(result_3, "transactions")
View(transactions)
inspect(transactions)
transactions <- as(result, "transactions")
inspect(transactions)
transactions <- as(result$Product, "transactions")
View(result)
transactions <- as(df[, -1], "transactions")
transactions <- as(df[2,50], "transactions")
transactions <- as(df[,-1], "transactions")
transactions <- as.data.frame(df[2, ]) %>%
as("transactions")
transactions <- as.data.frame(df[2,49]) %>%
as("transactions")
transactions <- as(result[,-1], "transactions")
inspect(head(transactions))
num_columns <- ncol(result)
# Print the number of columns
print(num_columns)
column_names <- names(result)
# Print the column names along with their indices
print(column_names)
transactions_2 <- as(result3, "transactions")
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
transactions_2 <- as(result3, "transactions")
transactions_2 <- as(result_3, "transactions")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="Product",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="Product",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
View(transactions)
View(transactions@itemInfo)
rm(transactions)
rm(transactions_2)
rm(trans_df)
rm(trans)
rm(mat)
rm(dataset)
transactions <- as(result[,-1], "transactions")
itemFrequencyPlot(transactions, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
library(tidyverse)
library(arules) # mining association rules and frequent itemsets
library(arulesViz) # visualization techniques for association rules
library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
library(magrittr)
library(jsonlite)
View(X1_Retail_Transactions_Dataset)
copied_df <- data.frame(X1_Retail_Transactions_Dataset)
View(copied_df)
copied_df$Product <- gsub("'", "\"", copied_df$Product)
# Convert the string representation to a vector of characters
copied_df$Product <- lapply(copied_df$Product, function(x) unlist(unname(fromJSON(x))))
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = list(0)
)
View(result)
transactions <- as(result[,-1], "transactions")
transactions_2 <- as(result_3, "transactions")
inspect(head(transactions))
itemFrequencyPlot(transactions, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
transactions <- as(result[,-1], "transactions")
transactions <- as(result, "transactions")
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = list(0)
)
itemFrequencyPlot(transactions_2, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
View(result_3)
transactions_2 <- as(result_3$Product, "transactions")
str(result_3)
transactions_3 <- as(X1_Retail_Transactions_Dataset$Product, "transactions")
copied_df2 <- data.frame(X1_Retail_Transactions_Dataset)
df$Product <- strsplit(df$Product, ",")
copied_df2 <- data.frame(X1_Retail_Transactions_Dataset)
copied_df2$Product <- strsplit(df$Product, ",")
copied_df2 <- data.frame(X1_Retail_Transactions_Dataset)
copied_df2$Product <- strsplit(copied_df2$Product, ",")
View(copied_df2)
transactions_3 <- as(copied_df$Product, "transactions")
itemFrequencyPlot(transactions, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(transactions_3, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
library(tidyverse)
library(arules) # mining association rules and frequent itemsets
library(arulesViz) # visualization techniques for association rules
library(knitr) # dynamic report generation
library(gridExtra) # provides a number of user-level functions to work with "grid" graphics
library(lubridate) # work with dates and times
library(magrittr)
library(jsonlite)
copied_df <- data.frame(X1_Retail_Transactions_Dataset)
View(copied_df)
copied_df$Product <- gsub("'", "\"", copied_df$Product)
# Convert the string representation to a vector of characters
copied_df$Product <- lapply(copied_df$Product, function(x) unlist(unname(fromJSON(x))))
result_3 <- copied_df %>%
unnest_longer(Product)
print(result_3)
View(result_3)
str(result_3)
result <- result_3 %>%
unnest_longer(Product) %>%
mutate(value = 1) %>%
pivot_wider(
id_cols = Transaction_ID,
names_from = Product,
values_fill = list(0)
)
View(result)
View(result)
trans <- as(copied_df$Product, "transactions")
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Relative Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="relative", col="lightcyan2", xlab="Item name",
ylab="Frequency (relative)", main="Relative Item Frequency Plot")
# Absolute Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
# Relative Item Frequency Plot
itemFrequencyPlot(trans, topN=15, type="relative", col="lightcyan2", xlab="Item name",
ylab="Frequency (relative)", main="Relative Item Frequency Plot")
item_freq <- itemFrequency(trans)
print(item_freq)
item_frequAbsolute <- itemFrequency(trans,type="absolute")
print(item_frequAbsolute)
itemFrequencyPlot(item_freqRelative, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
print(class(item_freqRelative))
print(class(item_freqRelative))
v <- class(item_freqRelative)
item_freqRelative <- itemFrequency(trans)
print(item_freqRelative)
item_frequAbsolute <- itemFrequency(trans,type="absolute")
print(item_frequAbsolute)
v <- class(item_freqRelative)
print(v)
itemFrequencyPlot(trans, topN=15, type="absolute", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
itemFrequencyPlot(trans, topN=15, type="relative", col="wheat2",xlab="Item name",
ylab="Frequency (absolute)", main="Absolute Item Frequency Plot")
item_freqRelative <- itemFrequency(trans)
print(item_freqRelative)
View(X1_Retail_Transactions_Dataset)
X1_Retail_Transactions_Dataset %>%
mutate(Month=as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions=n_distinct(Transaction)) %>%
ggplot(aes(x=Month, y=Transactions)) +
geom_bar(stat="identity", fill="mistyrose2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per month") +
theme_bw()
X1_Retail_Transactions_Dataset %>%
mutate(Month = as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions = n_distinct(Transaction)) %>%
ggplot(aes(x = Month, y = Transactions)) +
geom_bar(stat = "identity", fill = "mistyrose2",
show.legend = FALSE, color = "black") +
geom_label(aes(label = Transactions)) +
labs(title = "Transactions per month") +
theme_bw()
X1_Retail_Transactions_Dataset %>%
mutate(Month = as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions = n_distinct(Transaction_ID)) %>%
ggplot(aes(x = Month, y = Transactions)) +
geom_bar(stat = "identity", fill = "mistyrose2",
show.legend = FALSE, color = "black") +
geom_label(aes(label = Transactions)) +
labs(title = "Transactions per month") +
theme_bw()
X1_Retail_Transactions_Dataset %>%
mutate(WeekDay=as.factor(weekdays(as.Date(Date)))) %>%
group_by(WeekDay) %>%
summarise(Transactions=n_distinct(Transaction_ID)) %>%
ggplot(aes(x=WeekDay, y=Transactions)) +
geom_bar(stat="identity", fill="peachpuff2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per weekday") +
scale_x_discrete(limits=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")) +
theme_bw()
X1_Retail_Transactions_Dataset %>%
mutate(WeekDay=as.factor(weekdays(as.Date(Date)))) %>%
group_by(WeekDay) %>%
summarise(Transactions=n_distinct(Transaction_ID)) %>%
ggplot(aes(x=WeekDay, y=Transactions)) +
geom_bar(stat="identity", fill="peachpuff2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per weekday") +
scale_x_discrete(limits=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")) +
theme_bw()
X1_Retail_Transactions_Dataset %>%
mutate(WeekDay=as.factor(weekdays((Date)))) %>%
group_by(WeekDay) %>%
summarise(Transactions=n_distinct(Transaction_ID)) %>%
ggplot(aes(x=WeekDay, y=Transactions)) +
geom_bar(stat="identity", fill="peachpuff2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per weekday") +
scale_x_discrete(limits=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")) +
theme_bw()
X1_Retail_Transactions_Dataset %>%
mutate(WeekDay=as.factor(weekdays((Date)))) %>%
group_by(WeekDay) %>%
summarise(Transactions=n_distinct(Transaction_ID)) %>%
ggplot(aes(x=WeekDay, y=Transactions)) +
geom_bar(stat="identity", fill="peachpuff2",
show.legend=FALSE, colour="black") +
geom_label(aes(label=Transactions)) +
labs(title="Transactions per weekday") +
scale_x_discrete(limits=c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday")) +
theme_bw()
View(X1_Retail_Transactions_Dataset)
X1_Retail_Transactions_Dataset %>%
mutate(Month = as.factor(month(Date))) %>%
group_by(Month) %>%
summarise(Transactions = n_distinct(Transaction_ID)) %>%
ggplot(aes(x = Month, y = Transactions)) +
geom_bar(stat = "identity", fill = "mistyrose2",
show.legend = FALSE, color = "black") +
geom_label(aes(label = Transactions)) +
labs(title = "Transactions per month") +
theme_bw()
View(X1_Retail_Transactions_Dataset)
