rules_sup10 <- integer(length = 9)
rules_sup5 <- integer(length = 9)
rules_sup1 <- integer(length = 9)
rules_sup0.5 <- integer(length = 9)
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(factor(confidenceLevels), 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = interaction(confidenceLevels, support), color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
supportLevels <- c(0.1, 0.05, 0.01, 0.005)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)
# Empty integers
rules_sup10 <- integer(length = 9)
rules_sup5 <- integer(length = 9)
rules_sup1 <- integer(length = 9)
rules_sup0.5 <- integer(length = 9)
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(factor(confidenceLevels), 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = interaction(confidenceLevels, support), color = support)) +
geom_line() +
geom_point() +
facet_grid(support ~ ., scales = "free_y") +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Support and confidence values
supportLevels <- c(0.1, 0.05, 0.01, 0.005)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1)
# Empty integers
rules_sup10 <- integer(length = 9)
rules_sup5 <- integer(length = 9)
rules_sup1 <- integer(length = 9)
rules_sup0.5 <- integer(length = 9)
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.05)
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Support and confidence values
supportLevels <- c(0.1, 0.05, 0.01, 0.005)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.025, 0.01, 0.005)
# Empty integers
rules_sup10 <- integer(length = length(confidenceLevels))
rules_sup5 <- integer(length = length(confidenceLevels))
rules_sup1 <- integer(length = length(confidenceLevels))
rules_sup0.5 <- integer(length = length(confidenceLevels))
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Data frame
num_rules <- data.frame(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5, confidenceLevels)
# Support and confidence values
supportLevels <- c(0.1, 0.05, 0.01, 0.005)
confidenceLevels <- c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.05, 0.025, 0.01, 0.005)
# Empty integers
rules_sup10 <- integer(length = length(confidenceLevels))
rules_sup5 <- integer(length = length(confidenceLevels))
rules_sup1 <- integer(length = length(confidenceLevels))
rules_sup0.5 <- integer(length = length(confidenceLevels))
# Apriori algorithm with a support level of 10%
for (i in 1:length(confidenceLevels)) {
rules_sup10[i] <- length(apriori(trans, parameter = list(sup = supportLevels[1],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 5%
for (i in 1:length(confidenceLevels)){
rules_sup5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[2],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 1%
for (i in 1:length(confidenceLevels)){
rules_sup1[i] <- length(apriori(trans, parameter = list(sup = supportLevels[3],
conf = confidenceLevels[i], target = "rules")))
}
# Apriori algorithm with a support level of 0.5%
for (i in 1:length(confidenceLevels)){
rules_sup0.5[i] <- length(apriori(trans, parameter = list(sup = supportLevels[4],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5),
support = rep(c("10%", "5%", "1%", "0.5%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Data frame
num_rules <- data.frame(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5, confidenceLevels)
# Number of rules found with a support level of 10%, 5%, 1% and 0.5%
ggplot(data=num_rules, aes(x=confidenceLevels)) +
# Plot line and points (support level of 10%)
geom_line(aes(y=rules_sup10, colour="Support level of 10%")) +
geom_point(aes(y=rules_sup10, colour="Support level of 10%")) +
# Plot line and points (support level of 5%)
geom_line(aes(y=rules_sup5, colour="Support level of 5%")) +
geom_point(aes(y=rules_sup5, colour="Support level of 5%")) +
# Plot line and points (support level of 1%)
geom_line(aes(y=rules_sup1, colour="Support level of 1%")) +
geom_point(aes(y=rules_sup1, colour="Support level of 1%")) +
# Plot line and points (support level of 0.5%)
geom_line(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
geom_point(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
# Labs and theme
labs(x="Confidence levels", y="Number of rules found",
title="Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[3],
conf=confidenceLevels[5], target="rules"))
inspect(rules_sup1_conf50) #PROBLEM, it contains 0
# Scatter plot
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[4],
conf=confidenceLevels[12], target="rules"))
inspect(rules_sup1_conf50) #PROBLEM, it contains 0
# Scatter plot
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
# Graph (default layout)
plot(rules_sup1_conf50, method="graph")
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph", control=list(layout=igraph::in_circle()))
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph", control=list(layout=igraph::in_circle()))
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph", control=list(layout=layout.auto))
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph")
install.packages("igraph")
install.packages("igraph")
library(igraph)
library(arules)
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph", control=list(layout=igraph::in_circle()))
source("C:/Users/Lucky/Desktop/data-mining-simulation/Week_6/RProject/data_cleaning.R", echo=TRUE)
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph", control=list(layout=igraph::in_circle()))
library(igraph)
# Graph (circular layout)
plot(rules_sup1_conf50, method="graph", control=list(layout=igraph::in_circle()))
source("C:/Users/Lucky/Desktop/data-mining-simulation/Week_6/RProject/data_cleaning.R", echo=TRUE)
# Graph (circular layout)
plot(rules_sup1_conf50, method="circular")
install.packages("rgl")
source("C:/Users/Lucky/Desktop/data-mining-simulation/Week_6/RProject/data_cleaning.R", echo=TRUE)
# Graph (circular layout)
plot(rules_sup1_conf50, method="circular")
# Graph (circular layout)
plot(rules_sup1_conf50, method="support")
# Graph (circular layout)
plot(rules_sup1_conf50, method="mosaic")
# Graph (circular layout)
plot(rules_sup1_conf50, method="matrix")
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[4],
conf=confidenceLevels[12], target="rules"))
inspect(rules_sup1_conf50) #PROBLEM, it contains 0
# Scatter plot
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
# Graph (default layout)
plot(rules_sup1_conf50, method="graph")
# Graph (circular layout)
plot(rules_sup1_conf50, method="matrix")
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Graph (circular layout)
plot(rules_sup1_conf50, method="doubledecker")
# Graph (circular layout)
plot(rules_sup1_conf50, method="paracoord")
# Graph (circular layout)
plot(rules_sup1_conf50, method="grouped")
# Graph (circular layout)
plot(rules_sup1_conf50, method="circular")
# Graph (circular layout)
plot(rules_sup1_conf50, method="scatterplot")
plot(rules_sup1_conf50, method="matrix3D")
plot(rules_sup1_conf50, method="matrix3d")
plot(rules_sup1_conf50, method="grouped")
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[4],
conf=confidenceLevels[13], target="rules"))
inspect(rules_sup1_conf50) #PROBLEM, it contains 0
# Scatter plot
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
# Graph (default layout)
plot(rules_sup1_conf50, method="graph")
# Graph (circular layout)
plot(rules_sup1_conf50, method="scatterplot")
plot(rules_sup1_conf50, method="grouped")
rules_sup0.05 <- integer(length = length(confidenceLevels))
for (i in 1:length(confidenceLevels)){
rules_sup0.05[i] <- length(apriori(trans, parameter = list(sup = supportLevels[5],
conf = confidenceLevels[i], target = "rules")))
}
rules_sup0.05 <- integer(length = length(confidenceLevels))
for (i in 1:length(confidenceLevels)){
rules_sup0.05[i] <- length(apriori(trans, parameter = list(sup = supportLevels[5],
conf = confidenceLevels[i], target = "rules")))
}
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 4),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005,0.001), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5,rules_sup0.05),
support = rep(c("10%", "5%", "1%", "0.5%", "0.05%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Data frame
num_rules <- data.frame(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5, confidenceLevels)
# Number of rules found with a support level of 10%, 5%, 1% and 0.5%
ggplot(data=num_rules, aes(x=confidenceLevels)) +
# Plot line and points (support level of 10%)
geom_line(aes(y=rules_sup10, colour="Support level of 10%")) +
geom_point(aes(y=rules_sup10, colour="Support level of 10%")) +
# Plot line and points (support level of 5%)
geom_line(aes(y=rules_sup5, colour="Support level of 5%")) +
geom_point(aes(y=rules_sup5, colour="Support level of 5%")) +
# Plot line and points (support level of 1%)
geom_line(aes(y=rules_sup1, colour="Support level of 1%")) +
geom_point(aes(y=rules_sup1, colour="Support level of 1%")) +
# Plot line and points (support level of 0.5%)
geom_line(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
geom_point(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
# Labs and theme
labs(x="Confidence levels", y="Number of rules found",
title="Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[5],
conf=confidenceLevels[13], target="rules"))
inspect(rules_sup1_conf50) #PROBLEM, it contains 0
# Scatter plot
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
# Graph (default layout)
plot(rules_sup1_conf50, method="graph")
# Graph (circular layout)
plot(rules_sup1_conf50, method="scatterplot")
plot(rules_sup1_conf50, method="grouped")
# Combine the results into a data frame
df <- data.frame(
confidenceLevels = rep(confidenceLevels, 5),
supportLevels = rep(c(0.1, 0.05, 0.01, 0.005,0.001), each = length(confidenceLevels)),
rules = c(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5,rules_sup0.05),
support = rep(c("10%", "5%", "1%", "0.5%", "0.05%"), each = length(confidenceLevels))
)
# Create a ggplot
ggplot(df, aes(x = confidenceLevels, y = rules, group = support, color = support)) +
geom_line() +
geom_point() +
facet_wrap(~support, scales = "free_y", ncol = 2) +
labs(x = "Confidence level", y = "Number of rules found",
title = "Apriori Algorithm Results for Different Support Levels") +
theme_bw()
# Data frame
num_rules <- data.frame(rules_sup10, rules_sup5, rules_sup1, rules_sup0.5, confidenceLevels)
# Number of rules found with a support level of 10%, 5%, 1% and 0.5%
ggplot(data=num_rules, aes(x=confidenceLevels)) +
# Plot line and points (support level of 10%)
geom_line(aes(y=rules_sup10, colour="Support level of 10%")) +
geom_point(aes(y=rules_sup10, colour="Support level of 10%")) +
# Plot line and points (support level of 5%)
geom_line(aes(y=rules_sup5, colour="Support level of 5%")) +
geom_point(aes(y=rules_sup5, colour="Support level of 5%")) +
# Plot line and points (support level of 1%)
geom_line(aes(y=rules_sup1, colour="Support level of 1%")) +
geom_point(aes(y=rules_sup1, colour="Support level of 1%")) +
# Plot line and points (support level of 0.5%)
geom_line(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
geom_point(aes(y=rules_sup0.5, colour="Support level of 0.5%")) +
# Labs and theme
labs(x="Confidence levels", y="Number of rules found",
title="Apriori algorithm with different support levels") +
theme_bw() +
theme(legend.title=element_blank())
# Apriori algorithm execution with a support level of 1% and a confidence level of 50%
rules_sup1_conf50 <- apriori(trans, parameter=list(sup=supportLevels[5],
conf=confidenceLevels[13], target="rules"))
inspect(rules_sup1_conf50) #PROBLEM, it contains 0
# Scatter plot
plot(rules_sup1_conf50, measure=c("support", "lift"), shading="confidence")
# Graph (default layout)
plot(rules_sup1_conf50, method="graph")
# Graph (circular layout)
plot(rules_sup1_conf50, method="scatterplot")
plot(rules_sup1_conf50, method="grouped")
